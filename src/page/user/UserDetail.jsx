import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
    CRow,
    CCol,
    CCard,
    CCardBody,
    CFormInput,
    CFormSelect,
    CButton,
    CImage,
} from "@coreui/react";
import { useGetUserByIdQuery, useUpdateUserMutation } from "../../service/userService.js";

const UserDetail = () => {
    const { id } = useParams(); // L·∫•y id ng∆∞·ªùi d√πng t·ª´ URL
    const navigate = useNavigate();

    // G·ªçi API l·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo id
    const { data, error, isLoading } = useGetUserByIdQuery(id);
    const [updateUser, { isLoading: isUpdating }] = useUpdateUserMutation();

    const [user, setUser] = useState({
        name: "",
        email: "",
        phone: "",
        address: "",
        role: "",
        status: "active",
        createdAt: "",
        avatar: "",
    });

    useEffect(() => {
        if (data) {
            setUser({
                name: data.name || "",
                email: data.email || "",
                phone: data.phone || "",
                address: data.address || "",
                role: data.role || "",
                status: data.status || "active",
                createdAt: data.createdAt || "",
                avatar: data.avatar || "",
            });
        }
    }, [data]);

    const handleStatusChange = (e) => {
        const newStatus = e.target.value;
        setUser((prev) => ({ ...prev, status: newStatus }));
    };
    const handleClickSave = async  () => {
        try {
            await updateUser({ user: { ...user}}).unwrap();
            alert("C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!");
        } catch (err) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
            alert("C·∫≠p nh·∫≠t th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.");
        }
    }
    if (isLoading) return <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>;
    if (error) return <p>L·ªói khi l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng</p>;

    return (
        <CCard className="p-4 shadow-lg">
            <CCardBody>
                <CRow className="mb-3 d-flex align-items-center">
                    <CCol md={8}>
                        <h4 className="fw-bold">üìå Danh s√°ch t√†i kho·∫£n {'>'} Ng∆∞·ªùi d√πng</h4>
                    </CCol>
                    <CCol md={4} className="text-end">
                        <CImage
                            src={user.avatar}
                            className="border rounded-circle shadow-sm"
                            width={100}
                            height={100}
                            alt="Avatar"
                        />
                    </CCol>
                </CRow>

                {/* H·ªç t√™n & Vai tr√≤ */}
                <CRow className="mb-3">
                    <CCol md={6}>
                        <label className="fw-semibold">H·ªç T√™n</label>
                        <CFormInput disabled value={user.name} className="border rounded-2" />
                    </CCol>
                    <CCol md={6}>
                        <label className="fw-semibold">Vai tr√≤</label>
                        <CFormInput disabled value={user.role} className="border rounded-2" />
                    </CCol>
                </CRow>

                {/* S·ªë ƒëi·ªán tho·∫°i & ƒê·ªãa ch·ªâ */}
                <CRow className="mb-3">
                    <CCol md={6}>
                        <label className="fw-semibold">SƒêT</label>
                        <CFormInput disabled value={user.phone} className="border rounded-2" />
                    </CCol>
                    <CCol md={6}>
                        <label className="fw-semibold">ƒê·ªãa ch·ªâ</label>
                        <CFormInput disabled value={user.address} className="border rounded-2" />
                    </CCol>
                </CRow>

                {/* Ng√†y tham gia */}
                <CRow className="mb-3">
                    <CCol md={6}>
                        <label className="fw-semibold">Ng√†y tham gia</label>
                        <CFormInput disabled value={user.createdAt} className="border rounded-2" />
                    </CCol>
                </CRow>

                {/* Tr·∫°ng th√°i */}
                <CRow className="mb-3">
                    <CCol md={6}>
                        <label className="fw-semibold">Tr·∫°ng th√°i</label>
                        <CFormSelect value={user.status} onChange={handleStatusChange} className="border rounded-2">
                            <option value="active">Ho·∫°t ƒë·ªông</option>
                            <option value="inactive">T·∫°m d·ª´ng</option>
                        </CFormSelect>
                    </CCol>
                </CRow>

                {/* N√∫t ch·ª©c nƒÉng */}
                <CRow className="text-center mt-4">
                    <CCol md={4}>
                        <CButton color="danger" className="w-100 rounded-3 py-2 fw-semibold">
                            üö® G·ª≠i c·∫£nh b√°o
                        </CButton>
                    </CCol>
                    <CCol md={4}>
                        <CButton color="secondary" className="w-100 rounded-3 py-2 fw-semibold" onClick={() => navigate(-1)}>
                            ‚¨ÖÔ∏è Quay l·∫°i
                        </CButton>
                    </CCol>
                    <CCol md={4}>
                        <CButton color="success" className="w-100 rounded-3 py-2 fw-semibold" onClick={handleClickSave} disabled={isUpdating}>
                            {isUpdating ? "ƒêang l∆∞u..." : "üíæ L∆∞u"}
                        </CButton>
                    </CCol>
                </CRow>
            </CCardBody>
        </CCard>
    );
};

export default UserDetail;
